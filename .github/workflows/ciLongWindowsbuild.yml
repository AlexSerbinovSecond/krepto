# Copyright (c) 2023 The Krepto core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

name: CI
on:
  # See: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request.
  pull_request:
  # See: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#push.
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

concurrency:
  group: ${{ github.event_name != 'pull_request' && github.run_id || github.ref }}
  cancel-in-progress: true

env:
  CI_FAILFAST_TEST_LEAVE_DANGLING: 1  # GHA does not care about dangling processes and setting this variable avoids killing the CI script itself on error
  MAKEJOBS: '-j10'

jobs:
  test-each-commit:
    name: 'test each commit'
    runs-on: ubuntu-24.04
    if: github.event_name == 'pull_request' && github.event.pull_request.commits != 1
    timeout-minutes: 360  # Use maximum time, see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes. Assuming a worst case time of 1 hour per commit, this leads to a --max-count=6 below.
    env:
      MAX_COUNT: 6
    steps:
      - name: Determine fetch depth
        run: echo "FETCH_DEPTH=$((${{ github.event.pull_request.commits }} + 2))" >> "$GITHUB_ENV"
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: ${{ env.FETCH_DEPTH }}
      - name: Determine commit range
        run: |
          # Checkout HEAD~ and find the test base commit
          # Checkout HEAD~ because it would be wasteful to rerun tests on the PR
          # head commit that are already run by other jobs.
          git checkout HEAD~
          # Figure out test base commit by listing ancestors of HEAD, excluding
          # ancestors of the most recent merge commit, limiting the list to the
          # newest MAX_COUNT ancestors, ordering it from oldest to newest, and
          # taking the first one.
          #
          # If the branch contains up to MAX_COUNT ancestor commits after the
          # most recent merge commit, all of those commits will be tested. If it
          # contains more, only the most recent MAX_COUNT commits will be
          # tested.
          #
          # In the command below, the ^@ suffix is used to refer to all parents
          # of the merge commit as described in:
          # https://git-scm.com/docs/git-rev-parse#_other_rev_parent_shorthand_notations
          # and the ^ prefix is used to exclude these parents and all their
          # ancestors from the rev-list output as described in:
          # https://git-scm.com/docs/git-rev-list
          MERGE_BASE=$(git rev-list -n1 --merges HEAD)
          EXCLUDE_MERGE_BASE_ANCESTORS=
          # MERGE_BASE can be empty due to limited fetch-depth
          if test -n "$MERGE_BASE"; then
            EXCLUDE_MERGE_BASE_ANCESTORS=^${MERGE_BASE}^@
          fi
          echo "TEST_BASE=$(git rev-list -n$((${{ env.MAX_COUNT }} + 1)) --reverse HEAD $EXCLUDE_MERGE_BASE_ANCESTORS | head -1)" >> "$GITHUB_ENV"
      - run: |
          sudo apt-get update
          sudo apt-get install clang ccache build-essential libtool autotools-dev automake pkg-config bsdmainutils python3-zmq libevent-dev libboost-dev libsqlite3-dev libdb++-dev systemtap-sdt-dev libminiupnpc-dev libnatpmp-dev qtbase5-dev qttools5-dev qttools5-dev-tools qtwayland5 libqrencode-dev -y
      - name: Compile and run tests
        run: |
          # Run tests on commits after the last merge commit and before the PR head commit
          # Use clang++, because it is a bit faster and uses less memory than g++
          git rebase --exec "echo Running test-one-commit on \$( git log -1 ) && ./autogen.sh && CC=clang CXX=clang++ ./configure --with-incompatible-bdb && make clean && make -j $(nproc) check && ./test/functional/test_runner.py -j $(( $(nproc) * 2 ))" ${{ env.TEST_BASE }}

  macos-native:
    name: 'macOS 13 native, Qt5, no tests - Professional DMG'
    # Use latest image, but hardcode version to avoid silent upgrades (and breaks).
    # See: https://github.com/actions/runner-images#available-images.
    runs-on: macos-13

    # No need to run on the read-only mirror, unless it is a PR.
    if: github.repository != 'bitcoin-core/gui' || github.event_name == 'pull_request'

    timeout-minutes: 120

    env:
      DANGER_RUN_CI_ON_HOST: 1
      BASE_ROOT_DIR: ${{ github.workspace }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clang version
        run: |
          sudo xcode-select --switch /Applications/Xcode_15.0.app
          clang --version

      - name: Install Homebrew packages
        env:
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
        run: |
          # A workaround for "The `brew link` step did not complete successfully" error.
          brew install --quiet python@3 || brew link --overwrite python@3
          brew install --quiet automake libtool pkg-config gnu-getopt ccache boost libevent miniupnpc libnatpmp zeromq qt@5 qrencode

      - name: Set Ccache directory
        run: echo "CCACHE_DIR=${RUNNER_TEMP}/ccache_dir" >> "$GITHUB_ENV"

      - name: Restore Ccache cache
        id: ccache-cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ github.job }}-ccache-${{ github.run_id }}
          restore-keys: ${{ github.job }}-ccache-

      - name: Configure and Build Krepto
        run: |
          echo "🔧 Building Krepto for macOS..."
          export PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:$PKG_CONFIG_PATH"
          export PATH="/opt/homebrew/bin:$PATH"
          
          # Clean any previous builds
          make clean || true
          
          # Configure for GUI build without tests
          ./autogen.sh
          ./configure --enable-gui --disable-tests --disable-bench --with-qt-bindir=/opt/homebrew/opt/qt@5/bin
          
          # Build with parallel jobs
          make -j8

      - name: Build Professional DMG
        run: |
          echo "🎨 Building Professional Krepto DMG Installer..."
          
          # Remove any previous DMG builds
          rm -rf Krepto.app dmg_temp Krepto.dmg Krepto.dmg.sha256 Krepto.dmg.md5 dmg_background.png
          
          # Verify executables exist
          if [ ! -f "src/qt/bitcoin-qt" ] || [ ! -f "src/bitcoind" ] || [ ! -f "src/bitcoin-cli" ]; then
              echo "❌ Required executable files not found!"
              ls -la src/qt/ || true
              ls -la src/ || true
              exit 1
          fi
          
          # Create app bundle for macdeployqt
          echo "📱 Creating app bundle for macdeployqt..."
          mkdir -p Krepto.app/Contents/{MacOS,Resources}
          
          # Copy bitcoin-qt as main executable for macdeployqt
          cp src/qt/bitcoin-qt Krepto.app/Contents/MacOS/Krepto
          
          # Create Info.plist for macdeployqt
          cat > Krepto.app/Contents/Info.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>Krepto</string>
              <key>CFBundleIdentifier</key>
              <string>org.krepto.Krepto</string>
              <key>CFBundleName</key>
              <string>Krepto</string>
              <key>CFBundleDisplayName</key>
              <string>Krepto</string>
              <key>CFBundleVersion</key>
              <string>1.0.0</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleSignature</key>
              <string>KREP</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.14</string>
              <key>NSHighResolutionCapable</key>
              <true/>
              <key>NSRequiresAquaSystemAppearance</key>
              <false/>
              <key>LSApplicationCategoryType</key>
              <string>public.app-category.finance</string>
          </dict>
          </plist>
          EOF
          
          # Run macdeployqt
          echo "🔧 Running macdeployqt..."
          MACDEPLOYQT="/opt/homebrew/opt/qt@5/bin/macdeployqt"
          if [ -f "$MACDEPLOYQT" ]; then
              echo "✅ Found macdeployqt at: $MACDEPLOYQT"
              "$MACDEPLOYQT" Krepto.app -verbose=2
              echo "✅ macdeployqt completed successfully!"
          else
              echo "❌ macdeployqt not found"
              exit 1
          fi
          
          # Add additional executables
          echo "📋 Adding additional executables..."
          cp src/bitcoind Krepto.app/Contents/MacOS/kryptod
          cp src/bitcoin-cli Krepto.app/Contents/MacOS/krypto-cli
          
          # Create wrapper script
          echo "📝 Creating wrapper script..."
          mv Krepto.app/Contents/MacOS/Krepto Krepto.app/Contents/MacOS/bitcoin-qt
          
          cat > Krepto.app/Contents/MacOS/Krepto << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          KREPTO_DATADIR="$HOME/.krepto"
          mkdir -p "$KREPTO_DATADIR"
          if [ ! -f "$KREPTO_DATADIR/krepto.conf" ]; then
              cp "$SCRIPT_DIR/../Resources/krepto.conf" "$KREPTO_DATADIR/" 2>/dev/null || true
          fi
          exec "$SCRIPT_DIR/bitcoin-qt" -datadir="$KREPTO_DATADIR" "$@"
          EOF
          
          chmod +x Krepto.app/Contents/MacOS/*
          
          # Create icon
          echo "🎨 Creating icon..."
          if [ -f "share/pixmaps/Bitcoin256.png" ]; then
              mkdir -p krepto.iconset
              sips -z 1024 1024 share/pixmaps/Bitcoin256.png --out temp_1024.png
              
              # Create all icon sizes
              sips -z 16 16 temp_1024.png --out krepto.iconset/icon_16x16.png
              sips -z 32 32 temp_1024.png --out krepto.iconset/icon_16x16@2x.png
              sips -z 32 32 temp_1024.png --out krepto.iconset/icon_32x32.png
              sips -z 64 64 temp_1024.png --out krepto.iconset/icon_32x32@2x.png
              sips -z 128 128 temp_1024.png --out krepto.iconset/icon_128x128.png
              sips -z 256 256 temp_1024.png --out krepto.iconset/icon_128x128@2x.png
              sips -z 256 256 temp_1024.png --out krepto.iconset/icon_256x256.png
              sips -z 512 512 temp_1024.png --out krepto.iconset/icon_256x256@2x.png
              sips -z 512 512 temp_1024.png --out krepto.iconset/icon_512x512.png
              sips -z 1024 1024 temp_1024.png --out krepto.iconset/icon_512x512@2x.png
              
              iconutil -c icns krepto.iconset
              cp krepto.icns Krepto.app/Contents/Resources/
              /usr/libexec/PlistBuddy -c "Add :CFBundleIconFile string krepto" Krepto.app/Contents/Info.plist 2>/dev/null || /usr/libexec/PlistBuddy -c "Set :CFBundleIconFile krepto" Krepto.app/Contents/Info.plist
              
              rm -rf krepto.iconset krepto.icns temp_1024.png
              echo "✅ Icon created successfully"
          fi
          
          # Create configuration
          echo "⚙️ Creating Krepto network configuration..."
          cat > Krepto.app/Contents/Resources/krepto.conf << 'EOF'
          # Krepto Client Configuration
          
          # Network Settings
          port=12345
          rpcport=12347
          
          # Connection to Seed Nodes
          addnode=164.68.117.90:12345
          addnode=5.189.133.204:12345
          connect=164.68.117.90:12345
          connect=5.189.133.204:12345
          
          # Node Settings
          daemon=0
          server=1
          listen=1
          
          # RPC Settings
          rpcuser=localuser
          rpcpassword=localpass123
          rpcbind=127.0.0.1
          rpcallowip=127.0.0.1
          
          # Logging
          debug=net
          logips=1
          
          # Disable mining on client
          gen=0
          
          # GUI Settings
          gui=1
          
          # Performance
          dbcache=512
          maxmempool=300
          
          # Force Krepto network
          onlynet=ipv4
          discover=0
          dnsseed=0
          EOF
          
          # Code signing
          echo "🔐 Code signing app bundle..."
          find Krepto.app/Contents/Frameworks -name "*.framework" -type d | while read framework; do
              codesign --force --sign - --deep "$framework" 2>/dev/null || true
          done
          find Krepto.app/Contents/Frameworks -name "*.dylib" -type f | while read dylib; do
              codesign --force --sign - "$dylib" 2>/dev/null || true
          done
          find Krepto.app/Contents/PlugIns -name "*.dylib" -type f 2>/dev/null | while read plugin; do
              codesign --force --sign - "$plugin" 2>/dev/null || true
          done
          for executable in Krepto.app/Contents/MacOS/*; do
              if [ -f "$executable" ] && [ -x "$executable" ]; then
                  codesign --force --sign - "$executable" 2>/dev/null || true
              fi
          done
          codesign --force --sign - --deep Krepto.app 2>/dev/null || true
          echo "✅ Code signing completed!"
          
          # Create DMG
          echo "🎨 Creating professional DMG..."
          mkdir -p dmg_temp
          cp -R Krepto.app dmg_temp/
          ln -s /Applications dmg_temp/Applications
          
          # Create temporary DMG
          hdiutil create -volname "Krepto Installer" -srcfolder dmg_temp -ov -format UDRW temp_krepto.dmg
          
          # Mount and customize
          hdiutil attach temp_krepto.dmg -mountpoint /Volumes/KreptoInstaller
          
          # Customize DMG appearance with AppleScript
          osascript << 'EOF'
          tell application "Finder"
              tell disk "KreptoInstaller"
                  open
                  set current view of container window to icon view
                  set toolbar visible of container window to false
                  set statusbar visible of container window to false
                  set the bounds of container window to {100, 100, 700, 500}
                  set viewOptions to the icon view options of container window
                  set arrangement of viewOptions to not arranged
                  set icon size of viewOptions to 128
                  
                  -- Set icon positions
                  set position of item "Krepto.app" of container window to {150, 200}
                  set position of item "Applications" of container window to {450, 200}
                  
                  update without registering applications
                  delay 2
                  close
              end tell
          end tell
          EOF
          
          # Unmount and convert to final DMG
          hdiutil detach /Volumes/KreptoInstaller
          hdiutil convert temp_krepto.dmg -format UDZO -o Krepto.dmg
          
          # Clean up temp files
          rm -rf dmg_temp temp_krepto.dmg
          
          # Create checksums
          shasum -a 256 Krepto.dmg > Krepto.dmg.sha256
          md5 Krepto.dmg > Krepto.dmg.md5
          
          echo "✅ Professional DMG created successfully!"
          echo "📋 File info:"
          ls -lh Krepto.dmg
          echo "🔐 Checksums:"
          cat Krepto.dmg.sha256
          cat Krepto.dmg.md5

      - name: Save Ccache cache
        uses: actions/cache/save@v4
        if: github.event_name != 'pull_request' && steps.ccache-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ env.CCACHE_DIR }}
          # https://github.com/actions/cache/blob/main/tips-and-workarounds.md#update-a-cache
          key: ${{ github.job }}-ccache-${{ github.run_id }}

      - name: Upload macOS DMG artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Krepto-macOS-DMG
          path: |
            Krepto.dmg
            Krepto.dmg.sha256
            Krepto.dmg.md5
          retention-days: 30

  win64-native:
    name: 'Win64 native, VS 2022'
    # Use latest image, but hardcode version to avoid silent upgrades (and breaks).
    # See: https://github.com/actions/runner-images#available-images.
    runs-on: windows-2022

    # No need to run on the read-only mirror, unless it is a PR.
    if: github.repository != 'bitcoin-core/gui' || github.event_name == 'pull_request'

    env:
      CCACHE_MAXSIZE: '200M'
      CI_CCACHE_VERSION: '4.7.5'
      CI_QT_CONF: '-release -silent -opensource -confirm-license -opengl desktop -static -static-runtime -mp -qt-zlib -qt-pcre -qt-libpng -nomake examples -nomake tests -nomake tools -no-angle -no-dbus -no-gif -no-gtk -no-ico -no-icu -no-libjpeg -no-libudev -no-sql-sqlite -no-sql-odbc -no-sqlite -no-vulkan -skip qt3d -skip qtactiveqt -skip qtandroidextras -skip qtcharts -skip qtconnectivity -skip qtdatavis3d -skip qtdeclarative -skip doc -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtimageformats -skip qtlocation -skip qtlottie -skip qtmacextras -skip qtmultimedia -skip qtnetworkauth -skip qtpurchasing -skip qtquick3d -skip qtquickcontrols -skip qtquickcontrols2 -skip qtquicktimeline -skip qtremoteobjects -skip qtscript -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtsvg -skip qtvirtualkeyboard -skip qtwayland -skip qtwebchannel -skip qtwebengine -skip qtwebglplugin -skip qtwebsockets -skip qtwebview -skip qtx11extras -skip qtxmlpatterns -no-openssl -no-feature-bearermanagement -no-feature-printdialog -no-feature-printer -no-feature-printpreviewdialog -no-feature-printpreviewwidget -no-feature-sql -no-feature-sqlmodel -no-feature-textbrowser -no-feature-textmarkdownwriter -no-feature-textodfwriter -no-feature-xml'
      CI_QT_DIR: 'qt-everywhere-src-5.15.11'
      CI_QT_URL: 'https://download.qt.io/official_releases/qt/5.15/5.15.11/single/qt-everywhere-opensource-src-5.15.11.zip'
      PYTHONUTF8: 1
      TEST_RUNNER_TIMEOUT_FACTOR: 40

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Developer Command Prompt for Microsoft Visual C++
        # Using microsoft/setup-msbuild is not enough.
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Get tool information
        run: |
          msbuild -version | Tee-Object -FilePath "msbuild_version"
          $env:VCToolsVersion | Tee-Object -FilePath "toolset_version"
          $env:CI_QT_URL | Out-File -FilePath "qt_url"
          $env:CI_QT_CONF | Out-File -FilePath "qt_conf"
          py -3 --version
          Write-Host "PowerShell version $($PSVersionTable.PSVersion.ToString())"

      - name: Restore static Qt cache
        id: static-qt-cache
        uses: actions/cache/restore@v4
        with:
          path: C:\Qt_static
          key: ${{ github.job }}-static-qt-${{ hashFiles('msbuild_version', 'qt_url', 'qt_conf') }}

      - name: Build static Qt. Download
        if: steps.static-qt-cache.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          curl --location --output C:\qt-src.zip %CI_QT_URL%
          choco install --yes --no-progress jom

      - name: Build static Qt. Expand source archive
        if: steps.static-qt-cache.outputs.cache-hit != 'true'
        shell: cmd
        run: tar -xf C:\qt-src.zip -C C:\

      - name: Build static Qt. Create build directory
        if: steps.static-qt-cache.outputs.cache-hit != 'true'
        run: |
          Rename-Item -Path "C:\$env:CI_QT_DIR" -NewName "C:\qt-src"
          New-Item -ItemType Directory -Path "C:\qt-src\build"

      - name: Build static Qt. Configure
        if: steps.static-qt-cache.outputs.cache-hit != 'true'
        working-directory: C:\qt-src\build
        shell: cmd
        run: ..\configure %CI_QT_CONF% -prefix C:\Qt_static

      - name: Build static Qt. Build
        if: steps.static-qt-cache.outputs.cache-hit != 'true'
        working-directory: C:\qt-src\build
        shell: cmd
        run: jom

      - name: Build static Qt. Install
        if: steps.static-qt-cache.outputs.cache-hit != 'true'
        working-directory: C:\qt-src\build
        shell: cmd
        run: jom install

      - name: Save static Qt cache
        if: steps.static-qt-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: C:\Qt_static
          key: ${{ github.job }}-static-qt-${{ hashFiles('msbuild_version', 'qt_url', 'qt_conf') }}

      - name: Ccache installation cache
        id: ccache-installation-cache
        uses: actions/cache@v4
        with:
          path: |
            C:\ProgramData\chocolatey\lib\ccache
            C:\ProgramData\chocolatey\bin\ccache.exe
            C:\ccache\cl.exe
          key: ${{ github.job }}-ccache-installation-${{ env.CI_CCACHE_VERSION }}

      - name: Install Ccache
        if: steps.ccache-installation-cache.outputs.cache-hit != 'true'
        run: |
          choco install --yes --no-progress ccache --version=$env:CI_CCACHE_VERSION
          New-Item -ItemType Directory -Path "C:\ccache"
          Copy-Item -Path "$env:ChocolateyInstall\lib\ccache\tools\ccache-$env:CI_CCACHE_VERSION-windows-x86_64\ccache.exe" -Destination "C:\ccache\cl.exe"

      - name: Restore Ccache cache
        id: ccache-cache
        uses: actions/cache/restore@v4
        with:
          path: ~/AppData/Local/ccache
          key: ${{ github.job }}-ccache-${{ github.run_id }}
          restore-keys: ${{ github.job }}-ccache-

      - name: Using vcpkg with MSBuild
        run: |
          Set-Location "$env:VCPKG_INSTALLATION_ROOT"
          Add-Content -Path "triplets\x64-windows-static.cmake" -Value "set(VCPKG_BUILD_TYPE release)"
          .\vcpkg.exe --vcpkg-root "$env:VCPKG_INSTALLATION_ROOT" integrate install
          git rev-parse HEAD | Tee-Object -FilePath "$env:GITHUB_WORKSPACE\vcpkg_commit"

      - name: vcpkg tools cache
        uses: actions/cache@v4
        with:
          path: C:/vcpkg/downloads/tools
          key: ${{ github.job }}-vcpkg-tools

      - name: vcpkg binary cache
        uses: actions/cache@v4
        with:
          path: ~/AppData/Local/vcpkg/archives
          key: ${{ github.job }}-vcpkg-binary-${{ hashFiles('vcpkg_commit', 'msbuild_version', 'toolset_version', 'build_msvc/vcpkg.json') }}

      - name: Generate project files
        run: py -3 build_msvc\msvc-autogen.py

      - name: Build
        shell: cmd
        run: |
          ccache --zero-stats
          msbuild build_msvc\bitcoin.sln -property:CLToolPath=C:\ccache;CLToolExe=cl.exe;UseMultiToolTask=true;Configuration=Release -maxCpuCount -verbosity:minimal -noLogo

      - name: Ccache stats
        run: ccache --show-stats

      - name: Find built executables
        shell: cmd
        run: |
          echo "=== Searching for ALL .exe files ==="
          dir /s *.exe
          echo "=== Specifically looking for bitcoin-qt.exe ==="
          dir /s bitcoin-qt.exe 2>nul || echo "bitcoin-qt.exe NOT FOUND!"
          echo "=== Current directory structure ==="
          dir
          echo "=== src directory ==="
          if exist src dir src
          echo "=== build_msvc directory structure ==="
          if exist build_msvc dir build_msvc
          echo "=== bitcoin-qt project directory ==="
          if exist build_msvc\bitcoin-qt dir build_msvc\bitcoin-qt

      - name: Save Ccache cache
        uses: actions/cache/save@v4
        if: github.event_name != 'pull_request' && steps.ccache-cache.outputs.cache-hit != 'true'
        with:
          path: ~/AppData/Local/ccache
          # https://github.com/actions/cache/blob/main/tips-and-workarounds.md#update-a-cache
          key: ${{ github.job }}-ccache-${{ github.run_id }}

      - name: Run unit tests
        run: echo "Unit tests temporarily disabled for Windows GUI build"
        # run: src\test_bitcoin.exe -l test_suite

      - name: Run benchmarks
        run: echo "Benchmarks temporarily disabled for Windows GUI build"
        # run: src\bench_bitcoin.exe -sanity-check

      - name: Run util tests
        run: echo "Util tests temporarily disabled for Windows GUI build"
        # run: py -3 test\util\test_runner.py

      - name: Run rpcauth test
        run: echo "RPC auth test temporarily disabled for Windows GUI build"
        # run: py -3 test\util\rpcauth-test.py

      - name: Run functional tests
        run: echo "Functional tests temporarily disabled for Windows GUI build"
        # env:
        #   TEST_RUNNER_EXTRA: ${{ github.event_name != 'pull_request' && '--extended' || '' }}
        # shell: cmd
        # run: py -3 test\functional\test_runner.py --jobs %NUMBER_OF_PROCESSORS% --ci --quiet --tmpdirprefix=%RUNNER_TEMP% --combinedlogslen=99999999 --timeout-factor=%TEST_RUNNER_TIMEOUT_FACTOR% %TEST_RUNNER_EXTRA%

      - name: Clone fuzz corpus
        run: echo "Fuzz corpus cloning temporarily disabled for Windows GUI build"
        # run: |
        #   git clone --depth=1 https://github.com/bitcoin-core/qa-assets "$env:RUNNER_TEMP\qa-assets"
        #   Set-Location "$env:RUNNER_TEMP\qa-assets"
        #   Write-Host "Using qa-assets repo from commit ..."
        #   git log -1

      - name: Run fuzz binaries
        run: echo "Fuzz binaries temporarily disabled for Windows GUI build"
        # env:
        #   BITCOINFUZZ: "${{ github.workspace}}\\src\\fuzz.exe"
        # shell: cmd
        # run: py -3 test\fuzz\test_runner.py --par %NUMBER_OF_PROCESSORS% --loglevel DEBUG %RUNNER_TEMP%\qa-assets\fuzz_seed_corpus

      - name: Create Windows GUI package
        shell: cmd
        run: |
          if exist Krepto-Windows-GUI rmdir /s /q Krepto-Windows-GUI
          mkdir Krepto-Windows-GUI
          echo "=== Copying executables from multiple locations ==="
          
          REM Copy from src directory (CLI tools built with autotools)
          if exist src\bitcoind.exe copy src\bitcoind.exe Krepto-Windows-GUI\
          if exist src\bitcoin-cli.exe copy src\bitcoin-cli.exe Krepto-Windows-GUI\
          if exist src\bitcoin-tx.exe copy src\bitcoin-tx.exe Krepto-Windows-GUI\
          if exist src\bitcoin-util.exe copy src\bitcoin-util.exe Krepto-Windows-GUI\
          if exist src\bitcoin-wallet.exe copy src\bitcoin-wallet.exe Krepto-Windows-GUI\
          if exist src\test_bitcoin.exe copy src\test_bitcoin.exe Krepto-Windows-GUI\
          if exist src\bench_bitcoin.exe copy src\bench_bitcoin.exe Krepto-Windows-GUI\
          if exist src\fuzz.exe copy src\fuzz.exe Krepto-Windows-GUI\
          
          REM Copy bitcoin-qt.exe from MSBuild output directory (GUI built with MSBuild)
          if exist build_msvc\x64\Release\bitcoin-qt.exe copy build_msvc\x64\Release\bitcoin-qt.exe Krepto-Windows-GUI\
          
          REM Show what we copied
          echo "=== Contents of Krepto-Windows-GUI directory ==="
          dir Krepto-Windows-GUI\
          
          REM Check if we have the main GUI executable
          if exist Krepto-Windows-GUI\bitcoin-qt.exe (
            echo "SUCCESS: bitcoin-qt.exe found in package!"
          ) else (
            echo "ERROR: bitcoin-qt.exe missing from package!"
            echo "=== Searching for bitcoin-qt.exe in all locations ==="
            dir /s bitcoin-qt.exe 2>nul || echo "bitcoin-qt.exe not found anywhere!"
          )
          
          REM Create proper krepto.conf with correct Krepto settings
          echo # Krepto Network Configuration > Krepto-Windows-GUI\krepto.conf
          echo addnode=164.68.117.90:12345 >> Krepto-Windows-GUI\krepto.conf
          echo addnode=5.189.133.204:12345 >> Krepto-Windows-GUI\krepto.conf
          echo rpcport=12347 >> Krepto-Windows-GUI\krepto.conf
          echo port=12345 >> Krepto-Windows-GUI\krepto.conf
          echo rpcuser=krepto >> Krepto-Windows-GUI\krepto.conf
          echo rpcpassword=krepto123 >> Krepto-Windows-GUI\krepto.conf
          echo server=1 >> Krepto-Windows-GUI\krepto.conf
          echo # Network settings >> Krepto-Windows-GUI\krepto.conf
          echo listen=1 >> Krepto-Windows-GUI\krepto.conf
          echo maxconnections=125 >> Krepto-Windows-GUI\krepto.conf
          echo Complete Krepto Windows GUI package with dual seed nodes > Krepto-Windows-GUI\README.txt
          echo bitcoin-qt.exe = Main GUI application ^(rename to krepto-qt.exe^) >> Krepto-Windows-GUI\README.txt
          echo bitcoind.exe = Daemon ^(rename to kryptod.exe^) >> Krepto-Windows-GUI\README.txt
          echo bitcoin-cli.exe = CLI interface ^(rename to krepto-cli.exe^) >> Krepto-Windows-GUI\README.txt
          echo. >> Krepto-Windows-GUI\README.txt
          echo CONFIGURATION: >> Krepto-Windows-GUI\README.txt
          echo Copy krepto.conf to data directory or place in same folder as executable >> Krepto-Windows-GUI\README.txt
          echo Windows data directory: %%APPDATA%%\Krepto\ >> Krepto-Windows-GUI\README.txt

      - name: Upload Windows GUI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Krepto-Windows-GUI
          path: Krepto-Windows-GUI/
          retention-days: 30
